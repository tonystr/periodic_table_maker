{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","elements","slice","i","elm","concat","Array","Center","react_default","a","createElement","className","this","props","children","Component","Element","hidden","symbol","Ptable","index","width","list","push","undefined","renderGroup","App","src_Center","src_Ptable","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,QAFIC,OAAuBC,QAElBC,EAAI,EAAGA,EAAI,IAAQA,IAAK,CAC7B,IAAMC,EAAMH,EAASE,GACF,kBAARC,IAEPH,EAAWA,EAASC,MAAM,EAAGC,GACxBE,OAAO,IAAIC,MAAMF,IACjBC,OAAOJ,EAASC,MAAMC,EAAI,IAE/BA,GAAKC,OAIPG,mLAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdC,KAAKC,MAAMC,SACZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBANVI,aAYrB,SAASC,EAAQH,GACb,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAAaE,EAAMI,OAAS,UAAY,KACnDJ,EAAMK,YAKbC,sLAEUC,EAAOC,GAGf,IAFA,IAAMC,EAAO,GAEJnB,EAAI,EAAGA,EAAIkB,EAAOlB,IACvBmB,EAAKC,KACDf,EAAAC,EAAAC,cAACM,EAAD,CACIE,OAAQjB,EAASmB,EAAQC,EAAQlB,SAAMqB,EACvCP,QAAShB,EAAUmB,EAAQC,EAAQlB,MAK/C,OAAQK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASW,oCAQhC,IAJA,IAEMA,EAAO,GAEJnB,EAAI,EAAGA,EAHD,EAGaA,IACxBmB,EAAKC,KAAKX,KAAKa,YAAYtB,EALjB,KAQd,OAAQK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUW,UA1BpBP,aA8BfW,mLAEE,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,iBACAH,EAAAC,EAAAC,cAACiB,EAAD,KAAQnB,EAAAC,EAAAC,cAACkB,EAAD,eALNb,aAWlBc,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD+C3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07ce7e4e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './ptable.scss';\nimport * as serviceWorker from './serviceWorker';\n\nimport elementsRaw from './table.json';\n\nlet elements = elementsRaw.slice();\n\nfor (let i = 0; i < 18 * 7; i++) {\n    const elm = elements[i];\n    if (typeof elm === \"number\") {\n\n        elements = elements.slice(0, i)\n            .concat(new Array(elm))\n            .concat(elements.slice(i + 1));\n\n        i += elm;\n    }\n}\n\nclass Center extends Component {\n    render() {\n        return (\n            <div className=\"padjust\">\n                <div className=\"padding\" />\n                {this.props.children}\n                <div className=\"padding\" />\n            </div>\n        );\n    }\n}\n\nfunction Element(props) {\n    return (\n        <div className={'element' + (props.hidden ? ' hidden' : '')}>\n            {props.symbol}\n        </div>\n    );\n}\n\nclass Ptable extends Component {\n\n    renderGroup(index, width) {\n        const list = [];\n\n        for (let i = 0; i < width; i++) {\n            list.push(\n                <Element\n                    symbol={elements[index * width + i] || undefined}\n                    hidden={!elements[(index * width + i)]}\n                />\n            );\n        }\n\n        return (<div className=\"group\">{list}</div>);\n    }\n\n    render() {\n        const width = 18;\n        const height = 7;\n        const list = [];\n\n        for (let i = 0; i < height; i++) {\n            list.push(this.renderGroup(i, width));\n        }\n\n        return (<div className=\"ptable\">{list}</div>);\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"title\"> Hello World </div>\n                <Center><Ptable /></Center>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}